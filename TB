
module tb_bridge();
    parameter addrWidth = 32;
    parameter dataWidth = 32;
    bit clk,rst;
    always #5 clk = ~clk;
    axi4_Lite i_f();
    apb IF();
    logic awreadyM,wreadyM,arreadyM,bvalidM,rvalidM;
    logic [1:0] brespM;
    logic [dataWidth-1:0] rdataM;
    logic [1:0] rrespM;

    logic [addrWidth-1:0] awaddrM;
    logic [2:0] awprotM;
    logic [dataWidth-1:0] wdataM;
    logic [dataWidth/8 - 1:0] wstrbM;
    logic [addrWidth-1:0] araddrM;
    logic [2:0] arprotM;
    logic pslverr, pready;
    //localparam int TEST_ITERATIONS = 10;
    //localparam int randTime;
    top dut (clk,rst,i_f.axiSlave,IF.masterAPB);

    int randAwready,randWready,randArready,randRready,randBready,randAddr,randData;
    initial begin

         //$randomseed = $time;
        clk <= 0;
        rst <= 0;
        IF.masterAPB.pready <= 0;
        IF.masterAPB.pslverr <= 0;
        i_f.axiSlave.awvalid <= 0;
        i_f.axiSlave.arvalid <= 0;
        i_f.axiSlave.awaddr <= 0;
        i_f.axiSlave.awprot <= 0;
        
        i_f.axiSlave.wdata <= 0;
        i_f.axiSlave.wstrb <= 0;
        i_f.axiSlave.wvalid <= 0;

        i_f.axiSlave.bready <= 0;

        i_f.axiSlave.rready <= 0;
        
        #20;
        rst = 1;
        #20;
        #5;
            test_write();
            
        #150;
        //i_f.axiSlave.awvalid <= 1;
        test_write();
                /*
        fork
        repeat(5) begin
            test_read();
            
                    #30;
                end
        join_any
        */

    end
     
    task  preadyTest();
        fork
        @(posedge clk) begin
            randAwready = $urandom_range(2, 9)*10;
            #randAwready;
            IF.masterAPB.pready <= 1;
            
            end
        join
    endtask // 
    task valid(); 
        i_f.axiSlave.awvalid <= 1;
    endtask

    task automatic test_write();      // TASK WRITE
        //@(posedge clk);begin
        randAddr = ($urandom_range(2, 9))*10;
        #randAddr;
        //  WRITE

        //  handshake addr
        fork
        i_f.axiSlave.awvalid <= 1;
        i_f.axiSlave.awaddr <= $urandom_range(0, 1024);
        i_f.axiSlave.awprot <= 3'b000;
        join
        wait((i_f.axiSlave.awready == 1)& (i_f.axiSlave.awvalid == 1)) // handshake addr!!!
            begin
                
                i_f.axiSlave.awvalid <= 0;
                // end handshake addr

                // handshake data
                randData = $urandom_range(0, 9)*10;
                #randData; 
                i_f.axiSlave.wvalid <= 1;
                i_f.axiSlave.wdata <= $urandom_range(0, 1024);
                i_f.axiSlave.wstrb <= $urandom_range(0, (2**dataWidth)/8-1);
                wait((i_f.axiSlave.wready == 1)) // handshake data !!!
                    begin 
                        fork
                        begin
                        preadyTest();
                        
                        end
                        join
                        i_f.axiSlave.wvalid <= 0;
                        i_f.axiSlave.bready <= 1;
                        IF.masterAPB.pslverr <= 1;
                        wait((i_f.axiSlave.bvalid == 1)) begin
                                                                       // handshake resp !!!
                        i_f.axiSlave.bready <=0;
                        IF.masterAPB.pslverr <= 0;
                        end
                        join_none
                        //end handshake
                        // i am motherfucker ha ha
                    end
                    end
            //end
        //$stop;
    endtask
 
endmodule
